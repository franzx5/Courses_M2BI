My_rlaplace()
My_rlaplace()
My_rlaplace()
My_rlaplace_n <- function(n){
return(replicate(n, My_rlaplace()))
}
My_rlaplace_n(10)
plot(My_rlaplace_n(10))
plot(My_rlaplace_n(100))
plot(1:10, My_rlaplace_n(100))
plot(1:100, My_rlaplace_n(100))
plot(My_rlaplace_n(100),1:100)
plot(My_rlaplace_n(100),1:100, ty = "b")
plot(My_rlaplace_n(100),1:100, ty = "l")
plot(My_rlaplace_n(10),1:10)
plot(My_rlaplace_n(100),1:100)
u = runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
u = runif(1,0,1)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rlaplace_n(10)
plot(My_rlaplace_n(10), 1:10)
plot(My_rlaplace_n(100), 1:100)
runif(10,0,1)
My_rlaplace <- function(n){
u = runif(n, 0, 1)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
My_rlaplace(10)
plot(My_rlaplace(10))
plot(My_rlaplace(10),1:10)
plot(My_rlaplace(100),1:100)
plot(My_rlaplace(1000),1:1000)
plot(My_rlaplace(100),1:100)
#Q3/
#**********
My_dlaplace <- function(x){
return(1/2 * exp(- abs(x)))
}
My_dlaplace(1:10)
plot(My_dlaplace(1:10))
#Q3/
#**********
My_dlaplace <- function(x){
return(1/2 * exp(- abs(x)))
}
My_plaplace <- function(x){
if (x<=0)
return(1/2 * exp(x))
else
return(1 - (1/2 * exp(-x)))
}
My_qlaplace <- function(p){
if (p>=0 & p <= 1/2){
return(log10(2 * p))
} else if (p > 1/2 & p <= 1) {
return(-log10(2 * (1-p)))
} else {
return(FALSE)
}
}
My_rlaplace <- function(n){
u = runif(n, 0, 1)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
My_rlaplace()
My_rlaplace(1:10)
My_rlaplace(10)
plot(My_rlaplace(10))
plot(My_rlaplace(10),1:10)
plot(My_rlaplace(100),1:100)
plot(My_rlaplace(1000),1:1000)
My_qlaplace <- function(p){
if (p>=0 & p <= 1/2){
return(log(2 * p))
} else if (p > 1/2 & p <= 1) {
return(-log(2 * (1-p)))
} else {
return(FALSE)
}
}
My_rlaplace <- function(n){
u = runif(n, 0, 1)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
plot(My_rlaplace(100),1:100)
My_qlaplace <- function(p){
if (p <= 1/2){
return(log(2 * p))
} else if (p > 1/2) {
return(-log(2 * (1-p)))
} else {
return(FALSE)
}
}
My_rlaplace <- function(n){
u = runif(n, 0, 1)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
plot(My_rlaplace(100),1:100)
My_rlaplace <- function(n){
u = runif(n)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
plot(My_rlaplace(100),1:100)
My_qlaplace <- function(p){
if (p <= 1/2){
return(log(2 * p))
} else if (p > 1/2) {
return(-log(2*(1-p)))
}
}
My_rlaplace <- function(n){
u = runif(n)
res = rep(NA, n)
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
plot(My_rlaplace(100),1:100)
My_qlaplace <- function(p){
if (p <= 1/2){
return(log(2 * p))
} else if (p > 1/2) {
return(-log(2*(1-p)))
}
}
My_rlaplace <- function(n){
u = runif(n)
res = c()
for (i in 1:length(u)){
res[i] = My_qlaplace(u[i])
}
return(res)
}
plot(My_rlaplace(100),1:100)
plot(My_rlaplace(100),1:100)
plot(My_rlaplace(100),1:100)
truehist(My_rlaplace(100))
truehist(My_rlaplace(1000))
truehist(My_rlaplace(10000))
truehist(My_rlaplace(1000))
x_vect = seq(-6,6, length=1000)
x_vect = seq(-6,8, length=1000)
lines(x_vect, My_dlaplace(x_vect))
lines(x_vect, My_dlaplace(x_vect), col = "red")
x_vect = seq(-6,8, length=10000)
lines(x_vect, My_dlaplace(x_vect), col = "red")
#visualisation
truhist(My_rlaplace(10))
#visualisation
truehist(My_rlaplace(10))
#visualisation
truehist(My_rlaplace(100))
#visualisation
truehist(My_rlaplace(1000))
lines(x_vect, My_dlaplace(x_vect))
lines(x_vect, My_dlaplace(x_vect), col = "red")
x_vect = seq(-6,8, length=10000)?rcauchy
?rcauchy
?rnorm
pi
m = sqrt(2*(exp(1)/pi))
x1 = My_rlaplace(10)
x2 = runif(10)
filtre = which(x2 = dnorm(x1)/(m*My_dlaplace(x1)))
x2
x1
dnorm(x1)
dnorm(x1) / My_dlaplace(x1)
which(dnorm(x1) / My_dlaplace(x1))
which(x2 = dnorm(x1) / My_dlaplace(x1))
which(x2 == dnorm(x1) / My_dlaplace(x1))
x2
which(x2 <= dnorm(x1) / My_dlaplace(x1))
truehist(x1[filtre])
truehist(x1[which(x2 <= dnorm(x1) / My_dlaplace(x1))])
Meth_rejet <- function(n){
m = sqrt(2*(exp(1)/pi))
x1 = My_rlaplace(n)
x2 = runif(n)
filtre = which(x2 <= dnorm(x1)/(m*My_dlaplace(x1)))
truehist(x1[filtre])
}
Meth_rejet(100)
Meth_rejet(1000)
Meth_rejet(10000)
return(x1[filtre])
Meth_rejet <- function(n){
m = sqrt(2*(exp(1)/pi))
x1 = My_rlaplace(n)
x2 = runif(n)
filtre = which(x2 <= dnorm(x1)/(m*My_dlaplace(x1)))
return(x1[filtre])
}
Meth_rejet(1000)
truehist(Meth_rejet(1000))
truehist(Meth_rejet(10000))
truehist(Meth_rejet(10000))
lines(seq(-4, 4, 1000), dnorm(seq(-4, 4, 1000), col = "red")
)
lines(seq(-4, 4, 1000), dnorm(seq(-4, 4, 1000), col = "red"))
lines(seq(-4, 4, 1000), dnorm(seq(-4, 4, 1000)))
x_vect = seq(-2, 2, 1000)
lines(x_vect, dnorm(x_vect), col = "red")
t = Meth_rejet(1000)
truhist(t)
truehist(t)
t = Meth_rejet(10000)
truehist(t)
x = seq(-2,2,1000)
lines(x, dnorm(x))
truehist(t)
x = seq(-2,2,1000)
truehist(t)
par(new = T)
truehist(t)
x = seq(-2,2,1000)
lines(x, dnorm(x))
truehist(t)
x = seq(-2,2,1000)
lines(x, dnorm(x))
dnorm(x)
?dnorm
x
seq(-2,2,10)
seq(-2,10,10)
seq(-2,10,0.1)
seq(-2,10,0.1,10)
x = seq(-2,2,0.5)
lines(x, dnorm(x), col = "red")
x = seq(-2,2,length = 0.5)
lines(x, dnorm(x), col = "red")
t = Meth_rejet(1000)
truehist(t)
t = Meth_rejet(10000)
truehist(t)
x = seq(-4, 4, length = 10000)
lines(x, dnorm(x), col = "red")
rbeta(1)
?rbeta
rbeta[1, -15, 15]
rbeta(1, -15, 15)
rbeta(1, 2, 1)
?dnorm
t=c(1)
t[2]=2
t
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,5)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,5)
My_rtarget(10,10)
My_rtarget <- function(x, nstep){
y = R_prop(x, 0.7)
vecX = c(x)
for (i in 2:nstep){
p = min(1, (D_target(y)*D_target(x)))
print(p)
if (i > p)
vecX[i] = y
else
vecX[i] = x
}
return(vecX)
}
My_rtarget(10,10)
My_rtarget <- function(x, nstep){
y = R_prop(x, 0.7)
vecX = c(x)
p = min(1, (D_target(y)*D_target(x)))
for (i in 2:nstep){
print(p)
if (i > p)
vecX[i] = y
else
vecX[i] = x
}
return(vecX)
}
My_rtarget(10,10)
My_rtarget <- function(x, nstep){
y = R_prop(x, 0.7)
vecX = c(x)
for (i in 2:nstep){
p = min(1, (D_target(y)*D_target(x)))
if (runif(1, min=0, max=1) > p)
vecX[i] = y
else
vecX[i] = x
}
return(vecX)
}
My_rtarget(10,10)
My_rtarget <- function(x, nstep){
y = R_prop(x, 0.7)
vecX = c(x)
for (i in 2:nstep){
p = min(1, (D_target(y)*D_target(x)))
print(p)
if (runif(1, min=0, max=1) > p)
vecX[i] = y
else
vecX[i] = x
}
return(vecX)
}
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
My_rtarget <- function(x, nstep){
y = R_prop(x, 0.7)
vecX = c(x)
for (i in 1:nstep){
print(vecX)
p = min(1, (D_target(y)/D_target(vecX[i])))
print(p)
if (runif(1, min=0, max=1) > p)
vecX[i] = y
else
vecX[i] = x
}
return(vecX)
}
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
source('~/Master/courses/process_stochastic/src/exo3.r')
My_rtarget(10,10)
truehist(My_rtarget(10,10))
truehist(My_rtarget(10,1000))
source('~/Master/courses/process_stochastic/src/exo3.r')
truehist(My_rtarget(10,1000))
source('~/Master/courses/process_stochastic/src/exo3.r')
truehist(My_rtarget(10,10000))
source('~/Master/courses/process_stochastic/src/exo3.r')
truehist(My_rtarget(10,10000))
source('~/Master/courses/process_stochastic/src/exo3.r')
truehist(My_rtarget(10,10000))
source('~/Master/courses/process_stochastic/src/exo3.r')
source('~/Master/courses/process_stochastic/src/exo3.r')
source('~/Master/courses/process_stochastic/src/exo3.r')
truehist(My_rtarget(10,10000))
lines(x.points, D_target(x.points), col = "red")
#visualisation
x.points = seq(-10,10, length = 10000)
lines(x.points, D_target(x.points), col = "red")
#Reading Data CeL (needed mogene library)
data.Cel = read.celfiles(filenames = sort(list.celfiles("../data/CEL-20180928/Archive/", full = TRUE)))
require(oligo)
require(annotate)
require(genefilter)
library(pd.mogene.2.0.st)
library(mogene20sttranscriptcluster.db)
library(hgu133a.db)
library(FactoMineR)
library(affy)
source('~/Master/courses/analyses_genomiq/src/exam.R', echo=TRUE)
source('~/Master/Courses_M2BI/polymorphisme_human_genom/src/tp1.R')
#libraries
library("SNPlocs.Hsapiens.dbSNP141.GRCh38")
#readind data
snps = SNPlocs.Hsapiens.dbSNP141.GRCh38
snpsById(snps, "rs1067")
snpsById(snps, "rs3091244")
biocLite("biomaRt")
biocLite("biomaRt")
#readind data
snpmart = useMart(biomart="ENSEMBL_MART_SNP", dataset="hsapiens_snp")
library(biomaRt)
#readind data
snpmart = useMart(biomart="ENSEMBL_MART_SNP", dataset="hsapiens_snp")
install.packages("tidyverse")
#readind data
snpmart = useMart(biomart="ENSEMBL_MART_SNP", dataset="hsapiens_snp")
#research
listFilters(snpmart) >%> filter(str_detect("Chr"))
library(dplyr)
#research
listFilters(snpmart) >%> filter(str_detect("Chr"))
#readind data
snpmart = useMart(biomart="ENSEMBL_MART_SNP", dataset="hsapiens_snp")
#research
listFilters(snpmart) %>% filter(str_detect("Chr"))
library(dplyr)
str_detect
library(tidyverse)
library(tidyverse)
#research
listFilters(snpmart) %>% filter(str("Chr"))
#research
listFilters(snpmart) %>% filter(str_detect("Chr"))
#research
listFilters(snpmart) %>% filter(str_detect(description, "Chr"))
#Loading on biomart
snps = getBM(
attributes = c('refsnp_id', "minor_allele_freq"),
filters = c('chr_name', 'start', "end"),
values = list(8, 100000, 1000000),
mart = snpmart
)
#graphs
snps = snps %>% filter(! is.na(minor_allele_freq) & minor_allele_freq > 0.05)
#hist
hist(snps$minor_allele_freq)
set.seed(1)
size=20
dev.off()
###############################################
#Quality control
#logistic simulation
x = rnorm(1000, mean = 0, sd = 0)
plot(x)
plot(x~x)
plot(x,x)
plot(x)
plot(x,x)
plot(x,1:length(x))
S = 3 + x/5
s
S
sample(c("Case", "Control"), size = 1, prob=c(p, 1-p), replace = TRUE)
P = 1/(1+ exp(-S))
###############################################
#Quality control
#logistic simulation
x = rnorm(1000, mean = 0, sd = 0)
S = 3 + (x/5)
P = 1/(1+ exp(-S))
###############################################
#Quality control
#logistic simulation
x = rnorm(1000, mean = 0, sd = 0)
s = 3 + (x/5)
p = 1/(1+ exp(-S))
glm(phenotypes ~ x, family = "binomial")
phenotypes = phenotypes == "Case"
glm(phenotypes ~ x, family = "binomial")
phenotypes = phenotypes == "Case"
phenotypes = phenotypes == "Case"
phneotypes = sapply(P, FUN = function(p)
sample(c("Case", "Control"), size = 1, prob=c(p, 1-p), replace = TRUE))
phenotypes = phenotypes == "Case"
dev.off()
#Stratification
library("snsStats")
install.packages(snsStats)
install.packages("snsStats")
biocLite(snpStats)
biocLite("snpStats")
#Stratification
library("snsStats")
#Stratification
library("snpStats")
library(FactoMineR)
