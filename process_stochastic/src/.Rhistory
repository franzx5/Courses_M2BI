my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x < ppois(u, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x < ppois(u, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x < ppois(u, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x < ppois(u, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x > ppois(u, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x > ppois(x, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(x > ppois(x, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(u > ppois(x, lambda)){
x = x + 1
}
return(x)
}
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
my_rpois_one(1)
rpois(10,1)
ppois(1,1)
?replicate
?replicate
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
point(valX, valY, col = "red")
lambda = 2.5
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
point(valX, valY, col = "red")
lambda = 2.5
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
lambda = 2.5
n = 10000
res = my_rpois(n, lambda)
plot(table(res))
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
?cumsum
cumsum(1:3)
1:3
lambda = 2.5
n = 10000
res = my_rpois(n, lambda)
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
lambda = 2.5
n = 10000
res = my_rpois(n, lambda)
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
my_rpois_one <- function(lambda){
u = runif(1)
x = 0
while(u > ppois(x, lambda)){
x = x + 1
}
return(x)
}
my_rpois <- function(n, lambda){
ret = rep(NA, n)
for (i in 1:n){
ret[i] = my_rpois_one(lambda) #or use replicate(n, my_rpois_one)
}
return(ret)
}
lambda = 2.5
n = 10000
res = my_rpois(n, lambda)
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
#Q2/
my_rdiscret_one <- function() {
}
lambda = 2.5
n = 10000
res = my_rpois(n, lambda)
plot(table(res))
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
plot(table(res))
#visualisation graph
valX = seq(0,12)
valY = n * dpois(valX, lambda)
points(valX, valY, col = "red")
plot(table(res)/n)
#visualisation graph
valX = seq(0,12)
valY = dpois(valX, lambda)
points(valX, valY, col = "red")
cumsum(0.1,0.4,0.3,0.2)
seq(0,1,0.1)
cumsum(seq(0,1,0.1))
seq(0,1,0.1)
1:3
cumsum(1:3)
?cumsum
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
cumsum(c(-3,1.3,7,15.2))
runif(1)
cumsum(0.1,0.4,0.3,0.2)
cumsum(c(0.1,0.4,0.3,0.2))
ppois(1, 1)
ppois(3,1)
#Q2/
my_rdiscret_one <- function() {
u = runif(1)
x = c(-3,1.3,7,15.2)
Fx = cumsum(x)
i = 0
while (u > Fx[i]){
i = i + 1
}
return(x[i])
}
my_rdiscret_one()
#Q2/
my_rdiscret_one <- function() {
u = runif(1)
x = c(-3,1.3,7,15.2)
Fx = cumsum(x)
i = 0
while(u > Fx[i]){
i = i + 1
}
return(x[i])
}
my_rdiscret_one()
x = c(-3,1.3,7,15.2)
Fx = cumsum(x)
Fx
Fx = cumsum(c(0.1,0.4,0.3,0.2))
Fx
#Q2/
my_rdiscret_one <- function() {
u = runif(1)
x = c(-3,1.3,7,15.2)
Fx = cumsum(c(0.1,0.4,0.3,0.2))
i = 0
while(u > Fx[i]){
i = i + 1
}
return(x[i])
}
my_rdiscret_one()
Fx
runif(1)
runif(1) > Fx[0]
runif(1) > Fx[0]
runif(1) > Fx[0]
runif(1) > Fx[1]
#Q2/
my_rdiscret_one <- function() {
u = runif(1)
x = c(-3,1.3,7,15.2)
Fx = cumsum(c(0.1,0.4,0.3,0.2))
i = 0
while(u > Fx[i]){
i = i + 1
}
return(x[i])
}
my_rdiscret_one()
Fx[0]
Fx[1]
#Q2/
my_rdiscret_one <- function() {
u = runif(1)
x = c(-3,1.3,7,15.2)
Fx = cumsum(c(0.1,0.4,0.3,0.2))
i = 1
while(u > Fx[i]){
i = i + 1
}
return(x[i])
}
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
my_rdiscret_one()
setwd("~/Master/courses/process_stochastic/src")
#Library imported
require(MASS)
#**********
#Functions
#**********
Estime_pi <- function(n, r) {
x1 = runif(n, min = 0, max=1) #generer aleatoire un nombre unif entre 0 et 1
theta = runif(n, min = -pi/2, max = pi/2)
x2 = x1 + sin(theta) * r
nsucces = sum(x2 > 1 | x2 < 0) #decompte du nombre de succès
return ((2 * n / nsucces) * r)
}
#Fucntion2
mse_pi <- function(n, r, nrep){
res = rep(NA, nrep)
for (i in 1:nrep){
res[i] = estime_pi(n, r)
}
return((sum(res - mean(res))) / length(res))
}
#Fucntion2
Mse_pi <- function(n, r, nrep){
res = rep(NA, nrep)
for (i in 1:nrep){
res[i] = estime_pi(n, r)
}
return((sum(res - mean(res))) / length(res))
}
#**********
#Functions
#**********
Estime_pi <- function(n, r) {
x1 <- runif(n, min = 0, max=1) #generer aleatoire un nombre unif entre 0 et 1
theta <- runif(n, min = -pi/2, max = pi/2)
x2 <- x1 + sin(theta) * r
nsucces <- sum(x2 > 1 | x2 < 0) #decompte du nombre de succès
return ((2 * n / nsucces) * r)
}
#Fucntion2
Mse_pi <- function(n, r, nrep){
res <- rep(NA, nrep)
for (i in 1:nrep){
res[i] <- estime_pi(n, r)
}
return((sum(res - mean(res))) / length(res))
}
Mse_pi(100,0.6,1000)
#Fucntion2
Mse_pi <- function(n, r, nrep){
res <- rep(NA, nrep)
for (i in 1:nrep){
res[i] <- Estime_pi(n, r)
}
return((sum(res - mean(res))) / length(res))
}
Mse_pi(100,0.6,1000)
replicate(10, Estime_pi(100, 0.6))
Estime_pi(100, 0.6)
Estime_pi(100, 0.6)
Estime_pi(100, 0.6)
#Fucntion2
Mse_pi <- function(n, r, nrep){
res <- rep(NA, nrep)
res = replicate(nrep, Estime_pi(n, r))
return((sum(res - mean(res))) / length(res))
}
Mse_pi(100, 0.6, 10)
seq(0,1,0.1)
lapply()
?lapply
lapply(seq(0,1,0.1), Mse_pi(10,1000)
)))
lapply(seq(0,1,0.1), Mse_pi(10,1000))
#function to compute Mse_variation giving r param variation (0~1) with 0.1 step
r.values = seq(0,1,0.1)
mse.var = rep(NA, length(r.values))
Mse_pi_variation <- function(n, nrep){
#function to compute Mse_variation giving r param variation (0~1) with 0.1 step
r.values = seq(0,1,0.1)
mse.var = rep(NA, length(r.values))
for (i in 1:length(r.values))
mse.var[i] = Mse_pi(n, r.values[i], nrep)
return(mse.var)
}
Mse_pi_variation(100, 10000)
Mse_pi_variation <- function(n, nrep){
#function to compute Mse_variation giving r param variation (0~1) with 0.1 step
r.values = seq(0.1,1,0.1)
mse.var = rep(NA, length(r.values))
for (i in 1:length(r.values))
mse.var[i] = Mse_pi(n, r.values[i], nrep)
return(mse.var)
}
Mse_pi_variation(100, 10000)
seq(0.1,1,0.1)
plot(Mse_pi_variation(100, 10000))
plot(Mse_pi_variation(100, 10000), ty = "l")
source('~/Master/courses/process_stochastic/src/exo1.r')
source('~/Master/courses/process_stochastic/src/exo3.r')
